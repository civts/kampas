use crate::helpers::cryptography::generate_random_string;
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use ts_rs::TS;

#[derive(Debug, Clone, Serialize, TS, Deserialize)]
#[serde(crate = "rocket::serde")]
#[ts(export, export_to = "../frontend/src/lib/models/bindings/")]
pub(crate) struct Ranking {
    /// Identifiers of the metrics!
    pub(crate) metrics: Vec<String>,
    /// Username of who created this one
    pub(crate) created_by: String,
    /// Timestamp of when it was created
    pub(crate) created_at: String,
    /// How it was created
    pub(crate) ordering: RankOrdering,
    pub(crate) identifier: String,
}

impl Ranking {
    pub(crate) fn new(metrics: Vec<String>, created_by: &str, ordering: RankOrdering) -> Self {
        let created_at = DateTime::<Utc>::default().timestamp_nanos().to_string();
        let id = generate_random_string(16);
        Self {
            created_at,
            identifier: id,
            created_by: created_by.to_string(),
            metrics,
            ordering,
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, TS, Eq, Hash)]
#[serde(crate = "rocket::serde")]
#[ts(export, export_to = "../frontend/src/lib/models/bindings/")]
pub(crate) enum RankOrdering {
    /// Generated by the greedy weighted set cover algorithm
    #[serde(rename = "greedy_w_set_cover")]
    GreedyWeightedSetCover,

    /// Someone manually ordered one or more of the metrics
    #[serde(rename = "manual")]
    Manual,
}
